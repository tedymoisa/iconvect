// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum UserStatus {
    TRIAL
    SUBSCRIBED
    CANCELLED
    BANNED
}

enum PaymentProvider {
    STRIPE
    PAYPAL
}

enum OrderStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
    REFUNDED
}

enum CreditTransactionType {
    PURCHASE // Credits bought
    GENERATION // Credits spent on AI generation
    TRIAL_GRANT // Initial trial credits
    SAVE_TO_LIBRARY
    REFUND // Credits refunded to user
    ADJUSTMENT // Manual admin adjustment
}

enum AiGenerationStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?

    credits     Decimal    @default(15)
    status      UserStatus @default(TRIAL)
    createdAt   DateTime   @default(now()) @map("created_at")
    updatedAt   DateTime   @updatedAt @map("updated_at")
    lastLoginIp String?    @map("last_login_ip")
    lastLoginAt DateTime?  @map("last_login_at")

    accounts           Account[]
    sessions           Session[]
    orders             Order[] // User's purchase orders
    invoices           Invoice[] // User's invoices
    creditTransactions CreditTransaction[] // History of credit changes
    aiGenerations      AiGenerationRequest[] // History of AI generations

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model CreditTransaction {
    id          String                @id @default(cuid())
    userId      String                @map("user_id")
    user        User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount      Decimal
    type        CreditTransactionType
    description String?
    createdAt   DateTime              @default(now()) @map("created_at")

    orderId String? @map("order_id")
    order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

    generationId String?              @map("generation_id")
    generation   AiGenerationRequest? @relation(fields: [generationId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([orderId])
    @@index([generationId])
    @@map("credit_transactions")
}

model Order {
    id               String          @id @default(cuid())
    userId           String          @map("user_id")
    user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    status           OrderStatus     @default(PENDING)
    amount           Decimal
    currency         String
    creditsPurchased Int             @map("credits_purchased")
    paymentProvider  PaymentProvider @map("payment_provider")
    providerOrderId  String?         @unique @map("provider_order_id")
    createdAt        DateTime        @default(now()) @map("created_at")
    updatedAt        DateTime        @updatedAt @map("updated_at")

    invoice            Invoice? // Link to the final invoice (usually one-to-one with successful order)
    creditTransactions CreditTransaction[]

    @@index([userId])
    @@map("orders")
}

model Invoice {
    id                String    @id @default(cuid())
    orderId           String    @unique @map("order_id")
    order             Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
    userId            String    @map("user_id")
    user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    providerInvoiceId String?   @unique @map("provider_invoice_id")
    status            String
    amountPaid        Decimal   @map("amount_paid")
    currency          String
    paidAt            DateTime? @map("paid_at")
    invoiceUrl        String?   @map("invoice_url")
    createdAt         DateTime  @default(now()) @map("created_at")
    updatedAt         DateTime  @updatedAt @map("updated_at")

    @@index([userId])
    @@index([orderId])
    @@map("invoices")
}

model AiGenerationRequest {
    id            String             @id @default(cuid())
    userId        String             @map("user_id")
    user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    prompt        String             @db.Text
    creditsCost   Decimal            @map("credits_cost")
    status        AiGenerationStatus @default(PENDING)
    resultSvgPath String?            @map("result_svg_path")
    errorMessage  String?            @map("error_message")
    createdAt     DateTime           @default(now()) @map("created_at")
    completedAt   DateTime?          @map("completed_at")

    creditTransactions CreditTransaction[]

    @@index([userId])
    @@map("ai_generation_requests")
}
